volumes:
  certs: 
    name: certs
  elasticsearchdata: 
    name: elasticsearchdata
  kibanadata: 
    name: kibanadata
  sqlite_data:
    name: sqlite_data
  img_storage:
    name: img_storage

networks:
  ft_transcendence:
      name: ft_transcendence
      driver: bridge



services:

###########################################################################
#                                                                         #
#                                  NGINX                                  # 
#                                                                         #
###########################################################################

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - ${NGINX_PORT}:443
    volumes:
      - certs:/etc/nginx/certs
      - ./frontend/:/usr/share/nginx/html
      - img_storage:/server/img_storage
    networks:
      - ft_transcendence
    depends_on:
      - setup
    restart: always


###########################################################################
#                                                                         #
#                                  BACKEND                                # 
#                                                                         #
###########################################################################

  sqlite:
    container_name: sqlite
    build:
      context: ./backend/db
      dockerfile: Dockerfile
    volumes:
      - sqlite_data:/data
    networks:
      - ft_transcendence

  fastifyapp:
    container_name: fastifyapp
    build:
      context: ./backend/fastify-app
      dockerfile: Dockerfile
    # ports:
    #   - ${FASTIFY_PORT}:4321
    volumes:
      - sqlite_data:/usr/src/app/db/
      #- ./IMAGES:/server/img_storage # Uncomment this line if you want to use a local directory for images
      - img_storage:/server/img_storage # Uncomment this line if you want to use a named volume for images
    environment:
      - PORT=${FASTIFY_PORT}  
      - SALT=${SALT}
    depends_on:
      - sqlite
      - nginx
    networks:
      - ft_transcendence
      
###########################################################################
#                                                                         #
#                              Elastic-stack                              # 
#                                                                         #
###########################################################################

  setup:
    container_name: setup
    build:
      context: ./services/certs
      dockerfile: Dockerfile
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    networks:
      - ft_transcendence
    healthcheck:
    
        test: ['CMD-SHELL', '[ -f config/certs/elasticsearch/elasticsearch.crt ]']
        interval: 5s
        timeout: 10s
        retries: 120
    restart: "no"


  elasticsearch:
   container_name: elasticsearch
   depends_on:
      setup:
        condition: service_healthy
   build :
      context: ./services/elasticsearch
      dockerfile: Dockerfile
   volumes:
     - certs:/usr/share/elasticsearch/config/certs
     - elasticsearchdata:/usr/share/elasticsearch/data
   ports:
     - ${ES_PORT}:9200
   networks:
    - ft_transcendence
   environment:
    - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    - CLUSTER_NAME=${CLUSTER_NAME}
    - LICENSE=${LICENSE}
    - KIBANA_PASSWORD=${KIBANA_PASSWORD}
   mem_limit: ${ES_MEM_LIMIT}
   restart: always
   ulimits:
     memlock:
       soft: -1
       hard: -1
   healthcheck:
     test: ["CMD-SHELL", "curl -k https://elastic:${ELASTIC_PASSWORD}@localhost:9200"]
     interval: 5s
     timeout: 10s
     retries: 120
  
  elasticsearch_data :
    container_name: elasticsearch_data
    build :
      context: ./services/elasticsearch/ilm
      dockerfile: Dockerfile
    depends_on :
      elasticsearch:
        condition: service_healthy
      setup :
        condition: service_healthy
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    networks:
      - ft_transcendence
    healthcheck:
      test: ["CMD-SHELL", "docker logs elasticsearch_data | grep -q 'ILM policy created successfully'"]
      interval: 5s
      timeout: 10s
      retries: 120

  kibana:
   container_name: kibana
   depends_on:
    elasticsearch:
      condition: service_healthy
   build :
     context: ./services/kibana
     dockerfile: Dockerfile
   volumes:
     - certs:/usr/share/kibana/config/certs
     - kibanadata:/usr/share/kibana/data
   ports:
     - ${KIBANA_PORT}:5601
   environment:
     - KIBANA_PASSWORD=${KIBANA_PASSWORD}
     - STACK_VERSION=${STACK_VERSION}
     - ENCRYPTION_KEY=${ENCRYPTION_KEY}
   mem_limit: ${KB_MEM_LIMIT}
   networks:
    - ft_transcendence
   healthcheck:
     test: ["CMD-SHELL", "curl -k https://elastic:${ELASTIC_PASSWORD}@localhost:5601/api/alerting/_health"]
     interval: 5s
     timeout: 10s
     retries: 120
   restart: always

  kibana_data :
    container_name: kibana_data
    build :
      context: ./services/kibana/additionals_data
      dockerfile: Dockerfile
    depends_on :
      elasticsearch:
        condition: service_healthy
      kibana :
        condition: service_healthy
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
      - STACK_VERSION=${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
    networks:
      - ft_transcendence
    healthcheck:
      test: ["CMD-SHELL", "docker logs kibana_data | grep -q 'Data views created successfully'"]
      interval: 5s
      timeout: 10s
      retries: 120


  logstash:
   container_name: logstash
   depends_on:
    elasticsearch:
      condition: service_healthy
   build :
     context: ./services/logstash
     dockerfile: Dockerfile
   volumes:
     - certs:/usr/share/logstash/certs
   environment:
     - xpack.monitoring.enabled=false
     - ELASTIC_USER=elastic
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - ELASTIC_HOSTS=https://elasticsearch:9200
     - STACK_VERSION=${STACK_VERSION}
   networks:
    - ft_transcendence
   restart: always

  filebeat:
    container_name: filebeat
    depends_on:
      elasticsearch:
        condition: service_healthy
    build :
      context: ./services/filebeat
      dockerfile: Dockerfile
    volumes:
      - certs:/usr/share/filebeat/certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    environment:
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - STACK_VERSION=${STACK_VERSION}
    networks:
      - ft_transcendence
    restart: always

###########################################################################
#                                                                         #
#                                MONITORING                               #
#                                                                         #
###########################################################################
  
  prometheus:
    container_name: prometheus
    depends_on:
      - setup
    build :
      context: ./services/prometheus
      dockerfile: Dockerfile
    volumes:
      - certs:/etc/prometheus/certs
    ports:
      - ${PROMETHEUS_PORT}:9090
    networks:
      - ft_transcendence
    restart: always

  elasticsearch_exporter:
    image: prometheuscommunity/elasticsearch-exporter
    container_name: elasticsearch_exporter
    user: '0'
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    command: >
      --es.uri=https://elastic:${ELASTIC_PASSWORD}@elasticsearch:9200
      --es.ca=/usr/share/elasticsearch/config/certs/ca/ca.crt
      --es.client-cert=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt
      --es.client-private-key=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.key
      --es.all
    restart: always
    networks:
      - ft_transcendence
    ports:
      - ${ES_EXPORTER_PORT}:9114
    depends_on:
      elasticsearch:
        condition: service_healthy
  nginx_exporter:
    image: nginx/nginx-prometheus-exporter
    container_name: nginx_exporter
    user: '0'
    volumes:
      - certs:/etc/nginx/certs
    command: >
      --nginx.scrape-uri=https://nginx:443/nginx_status
    ports:
      - ${NGINX_EXPORTER_PORT}:9113
    networks:
      - ft_transcendence
    restart: always
    depends_on:
      - nginx

  cadvisor:
    container_name: cadvisor
    build: 
      context: ./services/cadvisor
      dockerfile: Dockerfile
    ports:
      - ${CADVISOR_PORT}:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - certs:/etc/certs
    networks:
      - ft_transcendence
    restart: always

  grafana:
    container_name: grafana
    build:
      context: ./services/grafana
      dockerfile: Dockerfile
    ports:
      - ${GRAFANA_PORT}:3000
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SSL_MODE=verify-full
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - certs:/etc/grafana/certs
    depends_on:
      setup :
        condition: service_healthy
    networks:
      - ft_transcendence

  alertmanager:
    container_name: alertmanager
    build:
      context: ./services/alertmanager
      dockerfile: Dockerfile
      args: 
        - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
    ports:
      - ${ALERTMANAGER_PORT}:9093
    volumes:
      - certs:/etc/alertmanager/certs
    networks:
      - ft_transcendence
    restart: always

  ts-compiler:
    container_name: ts-compiler
    build:
      context: ./services/ts-compiler
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app/frontend
    networks:
      - ft_transcendence
