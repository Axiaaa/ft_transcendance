volumes:
  certs: 
    name: certs
  elasticsearchdata: 
    name: elasticsearchdata
  kibanadata: 
    name: kibanadata
  sqlite_data:
    name: sqlite_data

networks:
  ft_transcendence:
      name: ft_transcendence
      driver: bridge



services:

###########################################################################
#                                                                         #
#                                  BACKEND                                # 
#                                                                         #
###########################################################################

  sqlite:
    image: alpine
    command: sh -c "apk add --no-cache sqlite && sqlite3 /data/database.db 'CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL);'"
    volumes:
      - sqlite_data:/data

  fastifyapp:
    build:
      context: ./backend/fastify-app
      dockerfile: Dockerfile
    ports:
      - "${FASTIFY_PORT}:4321"
    volumes:
      - sqlite_data:/usr/src/app/db/
    environment:
      - PORT=${FASTIFY_PORT}
    depends_on:
      - sqlite
###########################################################################
#                                                                         #
#                              Elastic-stack                              # 
#                                                                         #
###########################################################################

  setup:
    container_name: elk_setup
    build:
      context: ./services/certs
      dockerfile: Dockerfile
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    networks:
      - ft_transcendence
    healthcheck:
        test: ['CMD-SHELL', '[ -f config/certs/elasticsearch/elasticsearch.crt ]']
        interval: 1s
        timeout: 5s
        retries: 120


  elasticsearch:
   container_name: elasticsearch
   depends_on:
      setup:
        condition: service_healthy
   build :
      context: ./services/elasticsearch
      dockerfile: Dockerfile
   volumes:
     - certs:/usr/share/elasticsearch/config/certs
     - elasticsearchdata:/usr/share/elasticsearch/data
   ports:
     - ${ES_PORT}:9200
   networks:
    - ft_transcendence
   environment:
    - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    - CLUSTER_NAME=${CLUSTER_NAME}
    - LICENSE=${LICENSE}
    - KIBANA_PASSWORD=${KIBANA_PASSWORD}
   mem_limit: ${ES_MEM_LIMIT}
   ulimits:
     memlock:
       soft: -1
       hard: -1
   restart: always
       
  kibana:
   container_name: kibana
   depends_on:
    setup:
      condition: service_healthy
   build :
     context: ./services/kibana
     dockerfile: Dockerfile
   volumes:
     - certs:/usr/share/kibana/config/certs
     - kibanadata:/usr/share/kibana/data
   ports:
     - ${KIBANA_PORT}:5601
   environment:
     - KIBANA_PASSWORD=${KIBANA_PASSWORD}
     - STACK_VERSION=${STACK_VERSION}
     - ENCRYPTION_KEY=${ENCRYPTION_KEY}
   mem_limit: ${KB_MEM_LIMIT}
   networks:
    - ft_transcendence
   restart: always

  logstash:
   container_name: logstash
   depends_on:
    setup:
      condition: service_healthy
   build :
     context: ./services/logstash
     dockerfile: Dockerfile
   volumes:
     - certs:/usr/share/logstash/certs
   environment:
     - xpack.monitoring.enabled=false
     - ELASTIC_USER=elastic
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - ELASTIC_HOSTS=https://elasticsearch:9200
     - STACK_VERSION=${STACK_VERSION}
   networks:
    - ft_transcendence
   restart: always

  filebeat:
    container_name: filebeat
    depends_on:
      setup:
        condition: service_healthy
    build :
      context: ./services/filebeat
      dockerfile: Dockerfile
    volumes:
      - certs:/usr/share/filebeat/certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    environment:
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - STACK_VERSION=${STACK_VERSION}
    networks:
      - ft_transcendence
    restart: always

###########################################################################
#                                                                         #
#                                MONITORING                               #
#                                                                         #
###########################################################################
  
  prometheus:
    container_name: prometheus
    depends_on:
      - setup
    build :
      context: ./services/prometheus
      dockerfile: Dockerfile
    volumes:
      - certs:/etc/prometheus/certs
    ports:
      - "9090:9090"
    networks:
      - ft_transcendence
    restart: always
    
  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - 3000:3000
  #   restart: always
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
  #     - GF_SSL_MODE=verify-full
  #     - GF_SECURITY_ALLOW_EMBEDDING=true
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - certs:/etc/grafana/certs
  #     - ./grafana.ini:/etc/grafana/grafana.ini
  #     - ./grafana-templates/:/var/lib/grafana/dashboards
  #     - ./dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
  #     - ./datasource.yml:/etc/grafana/provisioning/datasources/datasources.yml
  #   depends_on:
  #    es : 
  #     condition: service_healthy



  # elasticsearch_exporter:
  #   image: prometheuscommunity/elasticsearch-exporter
  #   container_name: elasticsearch_exporter
  #   user: root
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #   command: >
  #     --es.uri=https://elastic:${ELASTIC_PASSWORD}@es:9200
  #     --es.ca=/usr/share/elasticsearch/config/certs/ca/ca.crt
  #     --es.client-cert=/usr/share/elasticsearch/config/certs/es/es.crt
  #     --es.client-private-key=/usr/share/elasticsearch/config/certs/es/es.key
  #   ports:
  #     - "9114:9114"
  #   depends_on:
  #    es : 
  #     condition: service_healthy
