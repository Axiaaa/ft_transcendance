volumes:
 certs:
   driver: local
 esdata:
   driver: local
 kibanadata:
   driver: local
 logstashdata:
   driver: local
 postgres_data:
   driver: local
 pgadmin_data:
   driver: local
 grafana_data :
   driver: local
services:

###########################################################################
#                                                                         #
#                                  BACKEND                                # 
#                                                                         #
###########################################################################
  postgres:
    build:
      context: ./db/pgSQL
    container_name: postgres_container
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./.tmp/postgresql/:/var/log/postgresql
    restart: always

  pgadmin:
    build:
      context: ./db/pgAdmin
    container_name: pgadmin_container
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./.tmp/pgadmin/:/pgadmin4/logs/
    ports:
      - "8080:80"
    depends_on:
      - postgres
    env_file: .env
    restart: always

  djangoapp:
    build:
      context: ./backend/project/
    depends_on:
      - postgres
    volumes:
      - ./backend/project:/app
      - ./.tmp/django/:/var/log/django/
    env_file: .env
    ports:
      - "8000:8000"
    restart: always


###########################################################################
#                                                                         #
#                              Elastic-stack                              # 
#                                                                         #
###########################################################################

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;

        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es\n"\
          "    dns:\n"\
          "      - es\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: grafana\n"\
          "    dns:\n"\
          "      - grafana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;

        if [ ! -f config/certs/grafana/grafana.crt ]; then
          echo "Creating Grafana certs";
          mkdir -p config/certs/grafana;
          openssl req -new -newkey rsa:4096 -nodes -keyout config/certs/grafana/grafana.key -out config/certs/grafana/grafana.csr -subj "/CN=grafana";
          openssl x509 -req -in config/certs/grafana/grafana.csr -CA config/certs/ca/ca.crt -CAkey config/certs/ca/ca.key -CAcreateserial -out config/certs/grafana/grafana.crt -days 365;
        fi;

        echo "Setting file permissions";
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;

        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es:9200 | grep -q "missing authentication credentials"; do sleep 30; done;

        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;

        echo "Certificates are ready!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es/es.crt ] && [ -f config/certs/grafana/grafana.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es:
   depends_on:
      setup:
        condition: service_healthy
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   labels:
     co.elastic.logs/module: elasticsearch
   volumes:
     - certs:/usr/share/elasticsearch/config/certs
     - esdata:/usr/share/elasticsearch/data
     - ./.tmp/elasticsearch:/usr/share/elasticsearch/logs
   ports:
     - ${ES_PORT}:9200
   environment:
     - node.name=es
     - cluster.name=${CLUSTER_NAME}
     - discovery.type=single-node
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - bootstrap.memory_lock=true
     - xpack.security.enabled=true
     - xpack.security.http.ssl.enabled=true
     - xpack.security.http.ssl.key=certs/es/es.key
     - xpack.security.http.ssl.certificate=certs/es/es.crt
     - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
     - xpack.security.transport.ssl.enabled=true
     - xpack.security.transport.ssl.key=certs/es/es.key
     - xpack.security.transport.ssl.certificate=certs/es/es.crt
     - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
     - xpack.security.transport.ssl.verification_mode=certificate
     - xpack.license.self_generated.type=${LICENSE}
   mem_limit: ${ES_MEM_LIMIT}
   ulimits:
     memlock:
       soft: -1
       hard: -1
   healthcheck:
    test:
      [
        "CMD-SHELL",
        "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
      ]
    interval: 10s
    timeout: 10s
    retries: 120
       
  kibana:
   depends_on:
    es:
      condition: service_healthy
   image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
   labels:
     co.elastic.logs/module: kibana
   volumes:
     - certs:/usr/share/kibana/config/certs
     - kibanadata:/usr/share/kibana/data
     - ./.tmp/kibana:/usr/share/kibana/logs
     - ./kibana.yaml:/usr/share/kibana/config/kibana.yml
   ports:
     - ${KIBANA_PORT}:5601
   environment:
     - SERVERNAME=kibana
     - ELASTICSEARCH_HOSTS=https://es:9200
     - ELASTICSEARCH_USERNAME=kibana_system
     - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
     - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
     - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
     - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
     - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
   mem_limit: ${KB_MEM_LIMIT}
   healthcheck:
    test: ["CMD-SHELL", "[ -f config/certs/es/es.crt ]"]
    interval: 1s
    timeout: 5s
    retries: 120

  logstash:
   depends_on:
    es : 
      condition: service_healthy
    kibana : 
      condition: service_healthy
   image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
   labels:
     co.elastic.logs/module: logstash
   user: root
   volumes:
     - certs:/usr/share/logstash/certs
     - logstashdata:/usr/share/logstash/data
     - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
     - ./.tmp/:/var/log/logstash/
   environment:
     - xpack.monitoring.enabled=false
     - ELASTIC_USER=elastic
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - ELASTIC_HOSTS=https://es:9200

  archive: 
    image: debian:latest
    container_name: archive_container
    volumes:
      - ./.tmp/:/var/log/logs/
      - ./.tmp/archives/:/var/log/archives/
      - ./archive.sh:/usr/local/bin/archive.sh
    command: >
      bash -c '
        apt-get update && apt-get install -y cron;
        echo "0 3 1 * * /usr/local/bin/archive.sh" > /etc/cron.d/archive;
        chmod 0644 /etc/cron.d/archive;
        crontab /etc/cron.d/archive;
        cron -f;
      '
    restart: always

###########################################################################
#                                                                         #
#                                MONITORING                               #
#                                                                         #
###########################################################################
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SSL_MODE=verify-full
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - grafana_data:/var/lib/grafana
      - certs:/etc/grafana/certs
      - ./grafana.ini:/etc/grafana/grafana.ini
      - ./grafana-templates/:/var/lib/grafana/dashboards
      - ./dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./datasource.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
     es : 
      condition: service_healthy



  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    restart: always
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres

  elasticsearch_exporter:
    image: prometheuscommunity/elasticsearch-exporter
    container_name: elasticsearch_exporter
    user: root
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    command: >
      --es.uri=https://elastic:${ELASTIC_PASSWORD}@es:9200
      --es.ca=/usr/share/elasticsearch/config/certs/ca/ca.crt
      --es.client-cert=/usr/share/elasticsearch/config/certs/es/es.crt
      --es.client-private-key=/usr/share/elasticsearch/config/certs/es/es.key
    ports:
      - "9114:9114"
    depends_on:
     es : 
      condition: service_healthy
